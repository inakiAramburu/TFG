# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }} - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\

{% endif %}\


{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits | unique(attribute="message") %}
        - {{ commit.message | upper_first }} \
        {% for footer in commit.footers -%}
            {% if footer.token|lower == "re" or footer.token|lower == "refs" or footer.token|lower == "rel" %}\
            

            {% set footer_value = footer.value | split(pat="\n") %} \
            {% set footer_value = footer_value[0] | split(pat=" ") %} \
            {% set footer_value = footer_value[0] %} \

            #[{{ footer_value }}]($TAREA{{ footer_value }}) \

            
            {% endif %}\
        {% endfor %}\
    {% endfor %}
{% endfor %}\n

{% if version == "unreleased"%}\
<!-- unreleased -->
{% endif %}\


"""
# template for the changelog footer
footer = """
"""
# remove the leading and trailing whitespace from the templates
trim = true

# postprocessors
postprocessors = [
    { pattern = '\$TAREA', replace = "https://inakiaramburur.atlassian.net/browse/" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactor" },
    { message = "^style", group = "Styling" },
    { message = "^test", group = "Testing" },
    { message = "^Merged", group = "Mergeados" },
    { message = "^improvement", group = "improvementados" },

    { message = "^chore\\(deps\\)", skip = false },
    { message = "^chore\\(pr\\)", skip = false },
    { message = "^chore\\(pull\\)", skip = false },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore|ci", group = "Miscellaneous Tasks" },
    { body = ".*security", group = "Security" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = true
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
